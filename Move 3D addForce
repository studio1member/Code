using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;

[RequireComponent(typeof(Rigidbody))]
public class MovementFix : MonoBehaviour
{
    [Header("Move Player")]
    [SerializeField] private float moveSpeed;
    [SerializeField] private float drag;
    [SerializeField] private float air;
    private CameraCtrl cameras;
    private Rigidbody rig;
    private CapsuleCollider capsu;
    private float ver;
    private float hor;

    [Header("Jump Player")]
    [SerializeField] private LayerMask layerGround;
    [SerializeField] private KeyCode JumpKey;
    [SerializeField] private float jumpForce;
    [SerializeField] private float height;
    [SerializeField] private bool checkGround;
    private void Awake()
    {
        rig = GetComponent<Rigidbody>();
        rig.freezeRotation = true;
        capsu = GetComponent<CapsuleCollider>();
        capsu.material = AssetDatabase.LoadAssetAtPath<PhysicMaterial>("Assets/File/Player/Player Physic.physicMaterial");

        cameras = GameObject.Find("Camera Main").GetComponent<CameraCtrl>();
    }
    private void Update()
    {
        InputPlayer();
        LimitSpeedPlayer();
    }
    private void FixedUpdate()
    {
        MovePlayer();
    }
    private void InputPlayer()
    {
        ver = Input.GetAxisRaw("Vertical");
        hor = Input.GetAxisRaw("Horizontal");

        checkGround = Physics.Raycast(transform.position, Vector3.down, height, layerGround);
        //player.checkJump = Physics.SphereCast(pointCheckGround.position, sphereRadius, Vector3.down, out RaycastHit hit, directionCheck, layerGround);

        if (Input.GetKeyDown(JumpKey) && checkGround) JumpPlayer();
    }
    private void MovePlayer()
    {
        Vector3 move = cameras.Camera_Main_1.forward * ver + cameras.Camera_Main_1.right * hor;
        

        if (checkGround)
        {
            rig.drag = drag;
            rig.AddForce(move.normalized * moveSpeed * 10, ForceMode.Force);
        }
        else
        {
            rig.drag = 0f;
            rig.AddForce(move.normalized * moveSpeed * air * 10, ForceMode.Force);
        }
    }
    private void LimitSpeedPlayer()
    {
        Vector3 checkVelocity = new Vector3(rig.velocity.x, 0, rig.velocity.z);
        if(checkVelocity.magnitude > moveSpeed)
        {
            Vector3 limitSpeed = checkVelocity.normalized * moveSpeed;
            rig.velocity = new Vector3(limitSpeed.x, rig.velocity.y, limitSpeed.z);
        }
    }
    private void JumpPlayer()
    {
        rig.velocity = new Vector3(rig.velocity.x, 0f, rig.velocity.z);
        rig.AddForce(transform.up * jumpForce, ForceMode.Impulse);
    }
    /*private void OnDrawGizmos()
    {
    Gizmos.color = Color.green;
    Gizmos.DrawWireSphere(transform.position + Vector3.down * directionCheck, 0.2f);
    }*/
}
